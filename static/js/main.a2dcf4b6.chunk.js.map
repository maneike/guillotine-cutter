{"version":3,"sources":["components/Workspace.js","helpers/IsRealNumber.js","components/Form.js","helpers/RandomColor.js","App.js","reportWebVitals.js","index.js"],"names":["Workspace","props","listRectangles","rectangles","map","rectangle","style","width","w","height","h","backgroundColor","c","display","float","position","className","isRealNumber","a","isNaN","Form","useState","setWidth","setHeight","rectanglesItems","setRectanglesItems","dimensionsError","setDimensionsError","sheetWidth","sheetHeight","Validation","onSubmit","e","preventDefault","Math","random","toString","slice","type","placeholder","value","onChange","target","autoFocus","color","Tooltip","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAEe,SAASA,EAAUC,GAChC,IACMC,EADaD,EAAME,WACSC,KAAI,SAACC,GAAD,OACpC,sBACEC,MAAO,CACLC,MAAOF,EAAUG,EACjBC,OAAQJ,EAAUK,EAClBC,gBAAiBN,EAAUO,EAC3BC,QAAS,eACTC,MAAO,OACPC,SAAU,YAPd,UAUG,EAAIV,EAAUG,EAVjB,MAUuB,EAAIH,EAAUK,QAIvC,OACE,mCACE,qBAAKM,UAAU,YAAf,SAA4Bd,MCrBnB,SAASe,EAAaC,GACnC,IAAKC,MAAMD,IAAMA,EAAI,GAAU,MAALA,GAAaA,EAAI,GAAK,EAC9C,OAAO,ECOI,SAASE,EAAKnB,GAAQ,IAAD,EACVoB,mBAAS,IADC,mBAC7Bd,EAD6B,KACtBe,EADsB,OAERD,mBAAS,IAFD,mBAE7BZ,EAF6B,KAErBc,EAFqB,OAGYF,mBAAS,IAHrB,mBAG3BG,EAH2B,KAGVC,EAHU,OAIYJ,mBAAS,IAJrB,mBAI3BK,EAJ2B,KAIVC,EAJU,OAKEN,mBAAS,KALX,mBAK3BO,EAL2B,aAMIP,mBAAS,MANb,mBAM3BQ,EAN2B,UAQlC,SAASC,IACP,OAAMb,EAAaV,GAASU,EAAaR,KAIrCF,EAAQqB,GAAcnB,EAASoB,KACjCF,EAAmB,uBACZ,IALPA,EAAmB,6BACZ,GA+BX,OACE,qCACE,uBACA,uBAAMI,SAzBe,SAACC,GAMxB,GALAA,EAAEC,iBACFN,EAAmB,IACnBG,IAGIrB,EAASF,EAAO,CAAC,IAAD,EACA,CAACE,EAAQF,GAA1BA,EADiB,KACVE,EADU,KAIhBqB,KACFL,EAAmB,GAAD,mBACbD,GADa,CAEhB,CACEhB,EAAGD,EAAQ,EACXG,EAAGD,EAAS,EACZG,EC5CD,KAAOsB,KAAKC,SAASC,SAAS,IAAM,UAAUC,MAAM,EAAG,QDqD1D,UACE,kCACE,sDACC,UACD,uBACEC,KAAK,OACLC,YAAY,WACZC,MAAOjC,EACPkC,SAAU,SAACT,GAAD,OAAOV,EAASU,EAAEU,OAAOF,QACnCG,WAAS,IAEV,YACD,uBACEL,KAAK,OACLC,YAAY,WACZC,MAAO/B,EACPgC,SAAU,SAACT,GAAD,OAAOT,EAAUS,EAAEU,OAAOF,aAItC,mBAAGlC,MAAO,CAAEsC,MAAO,WAAnB,SAAiClB,IAEnC,uBACA,uBAAOY,KAAK,SAASE,MAAM,QAC3B,cAACK,EAAA,EAAD,CACEC,MAAM,uHADR,SAIE,cAAC,IAAD,SAGJ,gDACkBlB,EADlB,MACiCC,KAEjC,cAAC,EAAD,CAAW1B,WAAYqB,OExEduB,MAbf,WACE,OACE,mCACE,sBAAK/B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,yDAEF,cAAC,EAAD,UCEOgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2dcf4b6.chunk.js","sourcesContent":["import \"./Workspace.css\";\n\nexport default function Workspace(props) {\n  const rectangles = props.rectangles;\n  const listRectangles = rectangles.map((rectangle) => (\n    <div\n      style={{\n        width: rectangle.w,\n        height: rectangle.h,\n        backgroundColor: rectangle.c,\n        display: \"inline-block\",\n        float: \"left\",\n        position: \"relative\",\n      }}\n    >\n      {2 * rectangle.w} x {2 * rectangle.h}\n    </div>\n  ));\n\n  return (\n    <>\n      <div className=\"workspace\">{listRectangles}</div>\n    </>\n  );\n}\n","export default function isRealNumber(a) {\n  if (!isNaN(a) && a > 0 && a != null && a % 1 == 0) {\n    return true;\n    //first form fields works correctly, second doesn't (math.sign()?)\n  }\n}\n","import { useState } from \"react\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport \"./Form.css\";\nimport Workspace from \"./Workspace\";\nimport RandomColor from \"../helpers/RandomColor\";\nimport isRealNumber from \"../helpers/IsRealNumber\";\n\nexport default function Form(props) {\n  let [width, setWidth] = useState(\"\");\n  let [height, setHeight] = useState(\"\");\n  const [rectanglesItems, setRectanglesItems] = useState([]);\n  const [dimensionsError, setDimensionsError] = useState(\"\");\n  const [sheetWidth, setSheetWidth] = useState(2000);\n  const [sheetHeight, setSheetHeight] = useState(2000);\n\n  function Validation() {\n    if ((!isRealNumber(width), !isRealNumber(height))) {\n      setDimensionsError(\"Enter correct dimensions\");\n      return false;\n    }\n    if (width > sheetWidth || height > sheetHeight) {\n      setDimensionsError(\"Dimensions too big\");\n      return false;\n    }\n    return true;\n  }\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    setDimensionsError(\"\");\n    Validation();\n\n    //rotate each rectangle to be more wide than high\n    if (height > width) {\n      [width, height] = [height, width];\n    }\n\n    if (Validation()) {\n      setRectanglesItems([\n        ...rectanglesItems,\n        {\n          w: width / 2,\n          h: height / 2,\n          c: RandomColor(),\n        },\n      ]);\n    }\n  };\n\n  return (\n    <>\n      <br />\n      <form onSubmit={handleFormSubmit}>\n        <label>\n          <p>Rectangle dimensions:</p>\n          {\"Width: \"}\n          <input\n            type=\"text\"\n            placeholder=\"e.g. 200\"\n            value={width}\n            onChange={(e) => setWidth(e.target.value)}\n            autoFocus\n          />\n          {\" Height: \"}\n          <input\n            type=\"text\"\n            placeholder=\"e.g. 100\"\n            value={height}\n            onChange={(e) => setHeight(e.target.value)}\n          />\n        </label>\n        {{ dimensionsError } ? (\n          <p style={{ color: \"crimson\" }}>{dimensionsError}</p>\n        ) : null}\n        <br />\n        <input type=\"submit\" value=\"Add\" />\n        <Tooltip\n          title=\"Some rectangles may appear invisible. That's because the color of\n            the figures probably matches the background color.\"\n        >\n          <InfoIcon />\n        </Tooltip>\n      </form>\n      <p>\n        Current space: {sheetWidth} x {sheetHeight}\n      </p>\n      <Workspace rectangles={rectanglesItems} />\n    </>\n  );\n}\n","export default function RandomColor() {\n  return \"#\" + (Math.random().toString(16) + \"000000\").slice(2, 8);\n}\n","import \"./App.css\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Guillotine-cutter App</h1>\n        </header>\n        <Form />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}